# Auto-generated by BabelAPI, do not modify.
try:
    from . import babel_validators as bv
except (SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import babel_validators as bv

class Empty(object):

    __slots__ = [
    ]

    _field_names_ = set((
    ))

    _fields_ = [
    ]

    def __init__(self):
        pass

    def __repr__(self):
        return 'Empty()'

class MemberInfo(object):
    """
    This is information about a dropbox user

    """

    __slots__ = [
        '_dbx_account_id_value',
        '_dbx_account_id_present',
        '_display_name_value',
        '_display_name_present',
        '_email_value',
        '_email_present',
        '_fname_value',
        '_fname_present',
        '_id_value',
        '_id_present',
        '_initials_url_value',
        '_initials_url_present',
        '_lname_value',
        '_lname_present',
        '_photo_circle_url_value',
        '_photo_circle_url_present',
        '_photo_url_value',
        '_photo_url_present',
        '_role_value',
        '_role_present',
    ]

    _dbx_account_id_validator = bv.String(pattern=None)
    _display_name_validator = bv.String(pattern=None)
    _email_validator = bv.String(pattern=None)
    _fname_validator = bv.String(pattern=None)
    _id_validator = bv.UInt64()
    _initials_url_validator = bv.String(pattern=None)
    _lname_validator = bv.String(pattern=None)
    _photo_circle_url_validator = bv.Nullable(bv.String(pattern=None))
    _photo_url_validator = bv.Nullable(bv.String(pattern=None))
    _role_validator = bv.String(pattern=None)

    _field_names_ = set((
        'dbx_account_id',
        'display_name',
        'email',
        'fname',
        'id',
        'initials_url',
        'lname',
        'photo_circle_url',
        'photo_url',
        'role',
    ))

    _fields_ = [
        ('dbx_account_id', _dbx_account_id_validator),
        ('display_name', _display_name_validator),
        ('email', _email_validator),
        ('fname', _fname_validator),
        ('id', _id_validator),
        ('initials_url', _initials_url_validator),
        ('lname', _lname_validator),
        ('photo_circle_url', _photo_circle_url_validator),
        ('photo_url', _photo_url_validator),
        ('role', _role_validator),
    ]

    def __init__(self,
                 dbx_account_id=None,
                 display_name=None,
                 email=None,
                 fname=None,
                 id=None,
                 initials_url=None,
                 lname=None,
                 role=None,
                 photo_circle_url=None,
                 photo_url=None):
        self._dbx_account_id_value = None
        self._dbx_account_id_present = False
        self._display_name_value = None
        self._display_name_present = False
        self._email_value = None
        self._email_present = False
        self._fname_value = None
        self._fname_present = False
        self._id_value = None
        self._id_present = False
        self._initials_url_value = None
        self._initials_url_present = False
        self._lname_value = None
        self._lname_present = False
        self._photo_circle_url_value = None
        self._photo_circle_url_present = False
        self._photo_url_value = None
        self._photo_url_present = False
        self._role_value = None
        self._role_present = False
        if dbx_account_id is not None:
            self.dbx_account_id = dbx_account_id
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if fname is not None:
            self.fname = fname
        if id is not None:
            self.id = id
        if initials_url is not None:
            self.initials_url = initials_url
        if lname is not None:
            self.lname = lname
        if photo_circle_url is not None:
            self.photo_circle_url = photo_circle_url
        if photo_url is not None:
            self.photo_url = photo_url
        if role is not None:
            self.role = role

    @property
    def dbx_account_id(self):
        """
        :rtype: str
        """
        if self._dbx_account_id_present:
            return self._dbx_account_id_value
        else:
            raise AttributeError("missing required field 'dbx_account_id'")

    @dbx_account_id.setter
    def dbx_account_id(self, val):
        val = self._dbx_account_id_validator.validate(val)
        self._dbx_account_id_value = val
        self._dbx_account_id_present = True

    @dbx_account_id.deleter
    def dbx_account_id(self):
        self._dbx_account_id_value = None
        self._dbx_account_id_present = False

    @property
    def display_name(self):
        """
        :rtype: str
        """
        if self._display_name_present:
            return self._display_name_value
        else:
            raise AttributeError("missing required field 'display_name'")

    @display_name.setter
    def display_name(self, val):
        val = self._display_name_validator.validate(val)
        self._display_name_value = val
        self._display_name_present = True

    @display_name.deleter
    def display_name(self):
        self._display_name_value = None
        self._display_name_present = False

    @property
    def email(self):
        """
        :rtype: str
        """
        if self._email_present:
            return self._email_value
        else:
            raise AttributeError("missing required field 'email'")

    @email.setter
    def email(self, val):
        val = self._email_validator.validate(val)
        self._email_value = val
        self._email_present = True

    @email.deleter
    def email(self):
        self._email_value = None
        self._email_present = False

    @property
    def fname(self):
        """
        :rtype: str
        """
        if self._fname_present:
            return self._fname_value
        else:
            raise AttributeError("missing required field 'fname'")

    @fname.setter
    def fname(self, val):
        val = self._fname_validator.validate(val)
        self._fname_value = val
        self._fname_present = True

    @fname.deleter
    def fname(self):
        self._fname_value = None
        self._fname_present = False

    @property
    def id(self):
        """
        :rtype: long
        """
        if self._id_present:
            return self._id_value
        else:
            raise AttributeError("missing required field 'id'")

    @id.setter
    def id(self, val):
        val = self._id_validator.validate(val)
        self._id_value = val
        self._id_present = True

    @id.deleter
    def id(self):
        self._id_value = None
        self._id_present = False

    @property
    def initials_url(self):
        """
        :rtype: str
        """
        if self._initials_url_present:
            return self._initials_url_value
        else:
            raise AttributeError("missing required field 'initials_url'")

    @initials_url.setter
    def initials_url(self, val):
        val = self._initials_url_validator.validate(val)
        self._initials_url_value = val
        self._initials_url_present = True

    @initials_url.deleter
    def initials_url(self):
        self._initials_url_value = None
        self._initials_url_present = False

    @property
    def lname(self):
        """
        :rtype: str
        """
        if self._lname_present:
            return self._lname_value
        else:
            raise AttributeError("missing required field 'lname'")

    @lname.setter
    def lname(self, val):
        val = self._lname_validator.validate(val)
        self._lname_value = val
        self._lname_present = True

    @lname.deleter
    def lname(self):
        self._lname_value = None
        self._lname_present = False

    @property
    def photo_circle_url(self):
        """
        :rtype: str
        """
        if self._photo_circle_url_present:
            return self._photo_circle_url_value
        else:
            return None

    @photo_circle_url.setter
    def photo_circle_url(self, val):
        if val is None:
            del self.photo_circle_url
            return
        val = self._photo_circle_url_validator.validate(val)
        self._photo_circle_url_value = val
        self._photo_circle_url_present = True

    @photo_circle_url.deleter
    def photo_circle_url(self):
        self._photo_circle_url_value = None
        self._photo_circle_url_present = False

    @property
    def photo_url(self):
        """
        :rtype: str
        """
        if self._photo_url_present:
            return self._photo_url_value
        else:
            return None

    @photo_url.setter
    def photo_url(self, val):
        if val is None:
            del self.photo_url
            return
        val = self._photo_url_validator.validate(val)
        self._photo_url_value = val
        self._photo_url_present = True

    @photo_url.deleter
    def photo_url(self):
        self._photo_url_value = None
        self._photo_url_present = False

    @property
    def role(self):
        """
        :rtype: str
        """
        if self._role_present:
            return self._role_value
        else:
            raise AttributeError("missing required field 'role'")

    @role.setter
    def role(self, val):
        val = self._role_validator.validate(val)
        self._role_value = val
        self._role_present = True

    @role.deleter
    def role(self):
        self._role_value = None
        self._role_present = False

    def __repr__(self):
        return 'MemberInfo(dbx_account_id={!r}, display_name={!r}, email={!r}, fname={!r}, id={!r}, initials_url={!r}, lname={!r}, role={!r}, photo_circle_url={!r}, photo_url={!r})'.format(
            self._dbx_account_id_value,
            self._display_name_value,
            self._email_value,
            self._fname_value,
            self._id_value,
            self._initials_url_value,
            self._lname_value,
            self._role_value,
            self._photo_circle_url_value,
            self._photo_url_value,
        )

class WorkspaceSettings(object):
    """
    These are workspace settings

    """

    __slots__ = [
        '_description_value',
        '_description_present',
        '_email_list_value',
        '_email_list_present',
        '_is_feed_enabled_value',
        '_is_feed_enabled_present',
        '_last_activity_value',
        '_last_activity_present',
        '_members_value',
        '_members_present',
        '_mount_point_value',
        '_mount_point_present',
        '_name_value',
        '_name_present',
        '_ns_id_value',
        '_ns_id_present',
        '_one_on_one_chat_value',
        '_one_on_one_chat_present',
        '_owner_value',
        '_owner_present',
        '_owner_team_id_value',
        '_owner_team_id_present',
        '_owner_team_name_value',
        '_owner_team_name_present',
        '_pinned_activities_value',
        '_pinned_activities_present',
        '_shared_folder_link_value',
        '_shared_folder_link_present',
        '_threading_type_value',
        '_threading_type_present',
        '_visibility_value',
        '_visibility_present',
    ]

    _description_validator = bv.String(pattern=None)
    _email_list_validator = bv.Nullable(bv.List(item_validator=bv.String(pattern=None)))
    _is_feed_enabled_validator = bv.Boolean()
    _last_activity_validator = bv.Int64()
    _members_validator = bv.Nullable(bv.List(item_validator=bv.Struct(MemberInfo)))
    _mount_point_validator = bv.String(pattern=None)
    _name_validator = bv.String(pattern=None)
    _ns_id_validator = bv.UInt64()
    _one_on_one_chat_validator = bv.Boolean()
    _owner_validator = bv.Struct(MemberInfo)
    _owner_team_id_validator = bv.UInt64()
    _owner_team_name_validator = bv.String(pattern=None)
    _pinned_activities_validator = bv.List(item_validator=bv.String(pattern=None))
    _shared_folder_link_validator = bv.String(pattern=None)
    _threading_type_validator = bv.Int64()
    _visibility_validator = bv.Int64()

    _field_names_ = set((
        'description',
        'email_list',
        'is_feed_enabled',
        'last_activity',
        'members',
        'mount_point',
        'name',
        'ns_id',
        'one_on_one_chat',
        'owner',
        'owner_team_id',
        'owner_team_name',
        'pinned_activities',
        'shared_folder_link',
        'threading_type',
        'visibility',
    ))

    _fields_ = [
        ('description', _description_validator),
        ('email_list', _email_list_validator),
        ('is_feed_enabled', _is_feed_enabled_validator),
        ('last_activity', _last_activity_validator),
        ('members', _members_validator),
        ('mount_point', _mount_point_validator),
        ('name', _name_validator),
        ('ns_id', _ns_id_validator),
        ('one_on_one_chat', _one_on_one_chat_validator),
        ('owner', _owner_validator),
        ('owner_team_id', _owner_team_id_validator),
        ('owner_team_name', _owner_team_name_validator),
        ('pinned_activities', _pinned_activities_validator),
        ('shared_folder_link', _shared_folder_link_validator),
        ('threading_type', _threading_type_validator),
        ('visibility', _visibility_validator),
    ]

    def __init__(self,
                 description=None,
                 is_feed_enabled=None,
                 last_activity=None,
                 mount_point=None,
                 name=None,
                 ns_id=None,
                 one_on_one_chat=None,
                 owner=None,
                 owner_team_id=None,
                 owner_team_name=None,
                 pinned_activities=None,
                 shared_folder_link=None,
                 threading_type=None,
                 visibility=None,
                 email_list=None,
                 members=None):
        self._description_value = None
        self._description_present = False
        self._email_list_value = None
        self._email_list_present = False
        self._is_feed_enabled_value = None
        self._is_feed_enabled_present = False
        self._last_activity_value = None
        self._last_activity_present = False
        self._members_value = None
        self._members_present = False
        self._mount_point_value = None
        self._mount_point_present = False
        self._name_value = None
        self._name_present = False
        self._ns_id_value = None
        self._ns_id_present = False
        self._one_on_one_chat_value = None
        self._one_on_one_chat_present = False
        self._owner_value = None
        self._owner_present = False
        self._owner_team_id_value = None
        self._owner_team_id_present = False
        self._owner_team_name_value = None
        self._owner_team_name_present = False
        self._pinned_activities_value = None
        self._pinned_activities_present = False
        self._shared_folder_link_value = None
        self._shared_folder_link_present = False
        self._threading_type_value = None
        self._threading_type_present = False
        self._visibility_value = None
        self._visibility_present = False
        if description is not None:
            self.description = description
        if email_list is not None:
            self.email_list = email_list
        if is_feed_enabled is not None:
            self.is_feed_enabled = is_feed_enabled
        if last_activity is not None:
            self.last_activity = last_activity
        if members is not None:
            self.members = members
        if mount_point is not None:
            self.mount_point = mount_point
        if name is not None:
            self.name = name
        if ns_id is not None:
            self.ns_id = ns_id
        if one_on_one_chat is not None:
            self.one_on_one_chat = one_on_one_chat
        if owner is not None:
            self.owner = owner
        if owner_team_id is not None:
            self.owner_team_id = owner_team_id
        if owner_team_name is not None:
            self.owner_team_name = owner_team_name
        if pinned_activities is not None:
            self.pinned_activities = pinned_activities
        if shared_folder_link is not None:
            self.shared_folder_link = shared_folder_link
        if threading_type is not None:
            self.threading_type = threading_type
        if visibility is not None:
            self.visibility = visibility

    @property
    def description(self):
        """
        :rtype: str
        """
        if self._description_present:
            return self._description_value
        else:
            raise AttributeError("missing required field 'description'")

    @description.setter
    def description(self, val):
        val = self._description_validator.validate(val)
        self._description_value = val
        self._description_present = True

    @description.deleter
    def description(self):
        self._description_value = None
        self._description_present = False

    @property
    def email_list(self):
        """
        :rtype: list of [str]
        """
        if self._email_list_present:
            return self._email_list_value
        else:
            return None

    @email_list.setter
    def email_list(self, val):
        if val is None:
            del self.email_list
            return
        val = self._email_list_validator.validate(val)
        self._email_list_value = val
        self._email_list_present = True

    @email_list.deleter
    def email_list(self):
        self._email_list_value = None
        self._email_list_present = False

    @property
    def is_feed_enabled(self):
        """
        :rtype: bool
        """
        if self._is_feed_enabled_present:
            return self._is_feed_enabled_value
        else:
            raise AttributeError("missing required field 'is_feed_enabled'")

    @is_feed_enabled.setter
    def is_feed_enabled(self, val):
        val = self._is_feed_enabled_validator.validate(val)
        self._is_feed_enabled_value = val
        self._is_feed_enabled_present = True

    @is_feed_enabled.deleter
    def is_feed_enabled(self):
        self._is_feed_enabled_value = None
        self._is_feed_enabled_present = False

    @property
    def last_activity(self):
        """
        :rtype: long
        """
        if self._last_activity_present:
            return self._last_activity_value
        else:
            raise AttributeError("missing required field 'last_activity'")

    @last_activity.setter
    def last_activity(self, val):
        val = self._last_activity_validator.validate(val)
        self._last_activity_value = val
        self._last_activity_present = True

    @last_activity.deleter
    def last_activity(self):
        self._last_activity_value = None
        self._last_activity_present = False

    @property
    def members(self):
        """
        :rtype: list of [MemberInfo]
        """
        if self._members_present:
            return self._members_value
        else:
            return None

    @members.setter
    def members(self, val):
        if val is None:
            del self.members
            return
        val = self._members_validator.validate(val)
        self._members_value = val
        self._members_present = True

    @members.deleter
    def members(self):
        self._members_value = None
        self._members_present = False

    @property
    def mount_point(self):
        """
        :rtype: str
        """
        if self._mount_point_present:
            return self._mount_point_value
        else:
            raise AttributeError("missing required field 'mount_point'")

    @mount_point.setter
    def mount_point(self, val):
        val = self._mount_point_validator.validate(val)
        self._mount_point_value = val
        self._mount_point_present = True

    @mount_point.deleter
    def mount_point(self):
        self._mount_point_value = None
        self._mount_point_present = False

    @property
    def name(self):
        """
        :rtype: str
        """
        if self._name_present:
            return self._name_value
        else:
            raise AttributeError("missing required field 'name'")

    @name.setter
    def name(self, val):
        val = self._name_validator.validate(val)
        self._name_value = val
        self._name_present = True

    @name.deleter
    def name(self):
        self._name_value = None
        self._name_present = False

    @property
    def ns_id(self):
        """
        :rtype: long
        """
        if self._ns_id_present:
            return self._ns_id_value
        else:
            raise AttributeError("missing required field 'ns_id'")

    @ns_id.setter
    def ns_id(self, val):
        val = self._ns_id_validator.validate(val)
        self._ns_id_value = val
        self._ns_id_present = True

    @ns_id.deleter
    def ns_id(self):
        self._ns_id_value = None
        self._ns_id_present = False

    @property
    def one_on_one_chat(self):
        """
        :rtype: bool
        """
        if self._one_on_one_chat_present:
            return self._one_on_one_chat_value
        else:
            raise AttributeError("missing required field 'one_on_one_chat'")

    @one_on_one_chat.setter
    def one_on_one_chat(self, val):
        val = self._one_on_one_chat_validator.validate(val)
        self._one_on_one_chat_value = val
        self._one_on_one_chat_present = True

    @one_on_one_chat.deleter
    def one_on_one_chat(self):
        self._one_on_one_chat_value = None
        self._one_on_one_chat_present = False

    @property
    def owner(self):
        """
        :rtype: MemberInfo
        """
        if self._owner_present:
            return self._owner_value
        else:
            raise AttributeError("missing required field 'owner'")

    @owner.setter
    def owner(self, val):
        self._owner_validator.validate_type_only(val)
        self._owner_value = val
        self._owner_present = True

    @owner.deleter
    def owner(self):
        self._owner_value = None
        self._owner_present = False

    @property
    def owner_team_id(self):
        """
        :rtype: long
        """
        if self._owner_team_id_present:
            return self._owner_team_id_value
        else:
            raise AttributeError("missing required field 'owner_team_id'")

    @owner_team_id.setter
    def owner_team_id(self, val):
        val = self._owner_team_id_validator.validate(val)
        self._owner_team_id_value = val
        self._owner_team_id_present = True

    @owner_team_id.deleter
    def owner_team_id(self):
        self._owner_team_id_value = None
        self._owner_team_id_present = False

    @property
    def owner_team_name(self):
        """
        :rtype: str
        """
        if self._owner_team_name_present:
            return self._owner_team_name_value
        else:
            raise AttributeError("missing required field 'owner_team_name'")

    @owner_team_name.setter
    def owner_team_name(self, val):
        val = self._owner_team_name_validator.validate(val)
        self._owner_team_name_value = val
        self._owner_team_name_present = True

    @owner_team_name.deleter
    def owner_team_name(self):
        self._owner_team_name_value = None
        self._owner_team_name_present = False

    @property
    def pinned_activities(self):
        """
        :rtype: list of [str]
        """
        if self._pinned_activities_present:
            return self._pinned_activities_value
        else:
            raise AttributeError("missing required field 'pinned_activities'")

    @pinned_activities.setter
    def pinned_activities(self, val):
        val = self._pinned_activities_validator.validate(val)
        self._pinned_activities_value = val
        self._pinned_activities_present = True

    @pinned_activities.deleter
    def pinned_activities(self):
        self._pinned_activities_value = None
        self._pinned_activities_present = False

    @property
    def shared_folder_link(self):
        """
        :rtype: str
        """
        if self._shared_folder_link_present:
            return self._shared_folder_link_value
        else:
            raise AttributeError("missing required field 'shared_folder_link'")

    @shared_folder_link.setter
    def shared_folder_link(self, val):
        val = self._shared_folder_link_validator.validate(val)
        self._shared_folder_link_value = val
        self._shared_folder_link_present = True

    @shared_folder_link.deleter
    def shared_folder_link(self):
        self._shared_folder_link_value = None
        self._shared_folder_link_present = False

    @property
    def threading_type(self):
        """
        :rtype: long
        """
        if self._threading_type_present:
            return self._threading_type_value
        else:
            raise AttributeError("missing required field 'threading_type'")

    @threading_type.setter
    def threading_type(self, val):
        val = self._threading_type_validator.validate(val)
        self._threading_type_value = val
        self._threading_type_present = True

    @threading_type.deleter
    def threading_type(self):
        self._threading_type_value = None
        self._threading_type_present = False

    @property
    def visibility(self):
        """
        :rtype: long
        """
        if self._visibility_present:
            return self._visibility_value
        else:
            raise AttributeError("missing required field 'visibility'")

    @visibility.setter
    def visibility(self, val):
        val = self._visibility_validator.validate(val)
        self._visibility_value = val
        self._visibility_present = True

    @visibility.deleter
    def visibility(self):
        self._visibility_value = None
        self._visibility_present = False

    def __repr__(self):
        return 'WorkspaceSettings(description={!r}, is_feed_enabled={!r}, last_activity={!r}, mount_point={!r}, name={!r}, ns_id={!r}, one_on_one_chat={!r}, owner={!r}, owner_team_id={!r}, owner_team_name={!r}, pinned_activities={!r}, shared_folder_link={!r}, threading_type={!r}, visibility={!r}, email_list={!r}, members={!r})'.format(
            self._description_value,
            self._is_feed_enabled_value,
            self._last_activity_value,
            self._mount_point_value,
            self._name_value,
            self._ns_id_value,
            self._one_on_one_chat_value,
            self._owner_value,
            self._owner_team_id_value,
            self._owner_team_name_value,
            self._pinned_activities_value,
            self._shared_folder_link_value,
            self._threading_type_value,
            self._visibility_value,
            self._email_list_value,
            self._members_value,
        )

class UserSettings(object):
    """
    Settings a user might have on a workspace

    """

    __slots__ = [
        '_archive_new_emails_value',
        '_archive_new_emails_present',
        '_last_viewed_value',
        '_last_viewed_present',
        '_notification_pref_value',
        '_notification_pref_present',
        '_ns_id_value',
        '_ns_id_present',
    ]

    _archive_new_emails_validator = bv.Boolean()
    _last_viewed_validator = bv.UInt64()
    _notification_pref_validator = bv.Int64()
    _ns_id_validator = bv.UInt64()

    _field_names_ = set((
        'archive_new_emails',
        'last_viewed',
        'notification_pref',
        'ns_id',
    ))

    _fields_ = [
        ('archive_new_emails', _archive_new_emails_validator),
        ('last_viewed', _last_viewed_validator),
        ('notification_pref', _notification_pref_validator),
        ('ns_id', _ns_id_validator),
    ]

    def __init__(self,
                 archive_new_emails=None,
                 last_viewed=None,
                 notification_pref=None,
                 ns_id=None):
        self._archive_new_emails_value = None
        self._archive_new_emails_present = False
        self._last_viewed_value = None
        self._last_viewed_present = False
        self._notification_pref_value = None
        self._notification_pref_present = False
        self._ns_id_value = None
        self._ns_id_present = False
        if archive_new_emails is not None:
            self.archive_new_emails = archive_new_emails
        if last_viewed is not None:
            self.last_viewed = last_viewed
        if notification_pref is not None:
            self.notification_pref = notification_pref
        if ns_id is not None:
            self.ns_id = ns_id

    @property
    def archive_new_emails(self):
        """
        :rtype: bool
        """
        if self._archive_new_emails_present:
            return self._archive_new_emails_value
        else:
            raise AttributeError("missing required field 'archive_new_emails'")

    @archive_new_emails.setter
    def archive_new_emails(self, val):
        val = self._archive_new_emails_validator.validate(val)
        self._archive_new_emails_value = val
        self._archive_new_emails_present = True

    @archive_new_emails.deleter
    def archive_new_emails(self):
        self._archive_new_emails_value = None
        self._archive_new_emails_present = False

    @property
    def last_viewed(self):
        """
        :rtype: long
        """
        if self._last_viewed_present:
            return self._last_viewed_value
        else:
            raise AttributeError("missing required field 'last_viewed'")

    @last_viewed.setter
    def last_viewed(self, val):
        val = self._last_viewed_validator.validate(val)
        self._last_viewed_value = val
        self._last_viewed_present = True

    @last_viewed.deleter
    def last_viewed(self):
        self._last_viewed_value = None
        self._last_viewed_present = False

    @property
    def notification_pref(self):
        """
        :rtype: long
        """
        if self._notification_pref_present:
            return self._notification_pref_value
        else:
            raise AttributeError("missing required field 'notification_pref'")

    @notification_pref.setter
    def notification_pref(self, val):
        val = self._notification_pref_validator.validate(val)
        self._notification_pref_value = val
        self._notification_pref_present = True

    @notification_pref.deleter
    def notification_pref(self):
        self._notification_pref_value = None
        self._notification_pref_present = False

    @property
    def ns_id(self):
        """
        :rtype: long
        """
        if self._ns_id_present:
            return self._ns_id_value
        else:
            raise AttributeError("missing required field 'ns_id'")

    @ns_id.setter
    def ns_id(self, val):
        val = self._ns_id_validator.validate(val)
        self._ns_id_value = val
        self._ns_id_present = True

    @ns_id.deleter
    def ns_id(self):
        self._ns_id_value = None
        self._ns_id_present = False

    def __repr__(self):
        return 'UserSettings(archive_new_emails={!r}, last_viewed={!r}, notification_pref={!r}, ns_id={!r})'.format(
            self._archive_new_emails_value,
            self._last_viewed_value,
            self._notification_pref_value,
            self._ns_id_value,
        )

class FeedNamespaces(object):

    __slots__ = [
        '_settings_value',
        '_settings_present',
        '_user_settings_value',
        '_user_settings_present',
    ]

    _settings_validator = bv.Struct(WorkspaceSettings)
    _user_settings_validator = bv.Struct(UserSettings)

    _field_names_ = set((
        'settings',
        'user_settings',
    ))

    _fields_ = [
        ('settings', _settings_validator),
        ('user_settings', _user_settings_validator),
    ]

    def __init__(self,
                 settings=None,
                 user_settings=None):
        self._settings_value = None
        self._settings_present = False
        self._user_settings_value = None
        self._user_settings_present = False
        if settings is not None:
            self.settings = settings
        if user_settings is not None:
            self.user_settings = user_settings

    @property
    def settings(self):
        """
        :rtype: WorkspaceSettings
        """
        if self._settings_present:
            return self._settings_value
        else:
            raise AttributeError("missing required field 'settings'")

    @settings.setter
    def settings(self, val):
        self._settings_validator.validate_type_only(val)
        self._settings_value = val
        self._settings_present = True

    @settings.deleter
    def settings(self):
        self._settings_value = None
        self._settings_present = False

    @property
    def user_settings(self):
        """
        :rtype: UserSettings
        """
        if self._user_settings_present:
            return self._user_settings_value
        else:
            raise AttributeError("missing required field 'user_settings'")

    @user_settings.setter
    def user_settings(self, val):
        self._user_settings_validator.validate_type_only(val)
        self._user_settings_value = val
        self._user_settings_present = True

    @user_settings.deleter
    def user_settings(self):
        self._user_settings_value = None
        self._user_settings_present = False

    def __repr__(self):
        return 'FeedNamespaces(settings={!r}, user_settings={!r})'.format(
            self._settings_value,
            self._user_settings_value,
        )

FUNCTIONS = {
    'feed_list': ('meta', bv.FunctionSignature(
        bv.FunctionStyle.RPC,
        bv.Struct(Empty),
        bv.List(item_validator=bv.Struct(FeedNamespaces)),
        bv.Struct(Empty),
    )),
}
